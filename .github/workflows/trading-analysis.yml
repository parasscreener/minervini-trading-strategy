name: üìä Minervini Trading Strategy - Daily Screening

on:
  schedule:
    # Run Monday to Friday at 9:30 AM IST (4:00 AM UTC)
    # IST is UTC+5:30, so 9:30 AM IST = 4:00 AM UTC
    - cron: '0 4 * * 1-5'

  # Allow manual trigger
  workflow_dispatch:
    inputs:
      force_backtest:
        description: 'Force run backtesting (normally runs only on Mondays)'
        required: false
        default: 'false'
        type: boolean
      test_mode:
        description: 'Run in test mode with limited data'
        required: false
        default: 'false'
        type: boolean

env:
  # Email configuration
  SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
  SENDER_PASSWORD: ${{ secrets.SENDER_PASSWORD }}
  RECIPIENT_EMAIL: paras.m.parmar@gmail.com

  # Runtime configuration
  FORCE_BACKTEST: ${{ github.event.inputs.force_backtest || 'false' }}
  TEST_MODE: ${{ github.event.inputs.test_mode || 'false' }}

jobs:
  trading-analysis:
    name: üéØ Run Minervini Stock Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Prevent infinite runs

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üêç Setup Python Environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: üì¶ Install TA-Lib Dependencies
      run: |
        # Install TA-Lib system dependencies
        sudo apt-get update
        sudo apt-get install -y build-essential wget

        # Download and install TA-Lib C library
        wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
        tar -xzf ta-lib-0.4.0-src.tar.gz
        cd ta-lib/
        ./configure --prefix=/usr
        make
        sudo make install

        # Install Python TA-Lib
        pip install TA-Lib

    - name: üìã Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: üîç Verify Installation
      run: |
        python -c "import pandas, yfinance, numpy; print('‚úÖ Core libraries installed')"
        python -c "import talib; print('‚úÖ TA-Lib installed successfully')"
        python -c "from data_fetcher import DataFetcher; print('‚úÖ Custom modules importable')"

    - name: üöÄ Run Trading Strategy Analysis
      id: analysis
      run: |
        echo "üìä Starting Mark Minervini Trading Strategy Analysis"
        echo "‚è∞ Current time: $(date)"
        echo "üåè Timezone: $(timedatectl show --property=Timezone --value)"

        # Set execution mode based on inputs
        if [ "${{ env.TEST_MODE }}" = "true" ]; then
          echo "üß™ Running in TEST mode"
          python main.py --test
        else
          echo "üéØ Running PRODUCTION analysis"
          python main.py
        fi

    - name: üìß Verify Email Sending
      if: always()
      run: |
        echo "üìß Email configuration check:"
        echo "Sender configured: $(if [ -n '${{ secrets.SENDER_EMAIL }}' ]; then echo 'Yes'; else echo 'No'; fi)"
        echo "Password configured: $(if [ -n '${{ secrets.SENDER_PASSWORD }}' ]; then echo 'Yes'; else echo 'No'; fi)"
        echo "Recipient: ${{ env.RECIPIENT_EMAIL }}"

    - name: üîÑ Weekly Backtest Report
      if: github.event.schedule == '0 4 * * 1' || env.FORCE_BACKTEST == 'true'
      run: |
        echo "üìä Running weekly comprehensive backtesting..."
        python main.py --backtest-only

    - name: üíæ Upload Analysis Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trading-analysis-${{ github.run_id }}
        path: |
          *.csv
          *.txt
          *.log
        retention-days: 30

    - name: üìä Analysis Summary
      if: always()
      run: |
        echo "üìà EXECUTION SUMMARY"
        echo "==================="
        echo "üïê Execution Time: $(date '+%Y-%m-%d %H:%M:%S %Z')"
        echo "üìß Target Email: ${{ env.RECIPIENT_EMAIL }}"
        echo "üéØ Strategy: Mark Minervini SEPA"
        echo "üìä Market: Indian Nifty 750 stocks"

        # Check if any CSV files were generated
        if ls *.csv 1> /dev/null 2>&1; then
          echo "‚úÖ Analysis files generated:"
          ls -la *.csv
        else
          echo "‚ö†Ô∏è No CSV files generated"
        fi

        # System resource usage
        echo ""
        echo "üíª System Resources:"
        echo "Memory usage: $(free -h | awk '/^Mem:/ { print $3 "/" $2 }')"
        echo "Disk usage: $(df -h . | awk 'NR==2 { print $3 "/" $2 }')"

  # Notification job for failures
  notify-failure:
    name: üìß Send Failure Notification  
    needs: trading-analysis
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: üö® Send Error Notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SENDER_EMAIL }}
        password: ${{ secrets.SENDER_PASSWORD }}
        subject: üö® Trading Strategy Failed - ${{ github.run_id }}
        to: paras.m.parmar@gmail.com
        from: ${{ secrets.SENDER_EMAIL }}
        body: |
          üö® TRADING STRATEGY EXECUTION FAILED

          Repository: ${{ github.repository }}
          Run ID: ${{ github.run_id }}
          Trigger: ${{ github.event_name }}
          Time: ${{ github.event.created_at }}

          Please check the GitHub Actions logs for details:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          This is an automated failure notification.

# Additional workflow for manual testing
